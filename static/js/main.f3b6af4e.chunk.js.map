{"version":3,"sources":["App.js","index.js"],"names":["require","Highcharts","App","state","active","options","componentDidMount","a","axios","get","res","setState","data","trans_month","i","xAxis","categories","setTemp","e","selectMonth","newTemp","parseFloat","target","value","checkInput","temp","setText","type","saveText","newOptions","text","setMonth","key","saveData","series","month","isNaN","this","className","InputGroup","Prepend","Text","FormControl","placeholder","onChange","Append","Button","variant","onClick","DropdownButton","as","title","defalut","map","Dropdown","Item","eventKey","onSelect","disabled","ref","highcharts","allowChartUpdate","updateArgs","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3b6af4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { Button, InputGroup, FormControl, DropdownButton, Dropdown } from 'react-bootstrap'\nimport axios from 'axios'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nrequire('highcharts/modules/exporting')(Highcharts)\n\n\nclass App extends Component {\n\n  state = {\n    active: false, //允許送出\n    options: null\n  }\n\n  componentDidMount = async () => {\n    const res = await axios.get('https://lunar-geography-271613.appspot.com/getData') // GCP後端取得資料\n    this.setState({options: res.data.options})\n  }\n\n  trans_month = (i) => {\n    const { categories } = this.state.options.xAxis\n    return categories[i]\n  }\n\n  setTemp = (e) => {\n    const { selectMonth } = this.state\n    let newTemp = parseFloat(e.target.value)\n    let active = this.checkInput(newTemp, selectMonth)\n\n    this.setState({\n      active,\n      temp: newTemp\n    })\n  }\n\n  setText = (type, e) => {\n    this.setState({ [type]: e.target.value })\n  }\n\n  saveText = (type) => {\n    const { options } = this.state\n    let newOptions = options\n    newOptions[type].text = this.state[type]\n    this.setState({ options: newOptions })\n  } \n\n  setMonth = (key, e) => {\n    const { temp } = this.state\n    let active = this.checkInput(temp, key)\n    this.setState({\n      active,\n      selectMonth: key\n    })\n  }\n\n  saveData = () => {\n    const { temp, selectMonth, options } = this.state\n    let newOptions = options\n    newOptions.series[0].data[selectMonth] = temp\n    this.setState({ options: newOptions })\n  }\n\n  checkInput = (temp, month) => {\n    let active = false\n    if(!(isNaN(temp)) && temp != 0 && month) {\n      active = true\n    }\n\n    return active\n  }\n  \n\n  render() {\n    const { active, options, selectMonth } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"App-header d-flex justify-content-center\">\n            <InputGroup className=\"mb-3 w-50\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>Title</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"輸入標題\"\n                onChange={(e) => this.setText('title', e)}\n              />\n              <InputGroup.Append>\n              <Button\n                variant=\"outline-info\"\n                onClick={() => this.saveText('title')}\n              >更新\n              </Button>\n              </InputGroup.Append>\n          </InputGroup>\n          <InputGroup className=\"mb-3 w-50\">\n            <InputGroup.Prepend>\n              <InputGroup.Text>SubTitle</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"輸入子標題\"\n              onChange={(e) => this.setText('subtitle', e)}\n            />\n            <InputGroup.Append>\n            <Button\n              variant=\"outline-info\"\n              onClick={() => this.saveText('subtitle')}\n            >更新\n            </Button>\n            </InputGroup.Append>\n          </InputGroup>\n          <InputGroup className=\"mb-3 w-50\">\n            <FormControl\n              placeholder=\"輸入溫度\"\n              onChange={this.setTemp}\n            />\n            <InputGroup.Append>\n              <DropdownButton\n                as={InputGroup}\n                title={selectMonth ? this.trans_month(selectMonth) : \"請選擇月份\"}\n                variant=\"outline-light\"\n                defalut=\"1\"\n              >\n                { options ? \n                  options.xAxis.categories.map((value, key) => {\n                    return (\n                      <Dropdown.Item \n                        key={key}\n                        eventKey={key}\n                        onSelect={this.setMonth}\n                      >\n                        {value}\n                      </Dropdown.Item>\n                    )\n                  })\n                : null}\n              </DropdownButton>\n            </InputGroup.Append>\n            <InputGroup.Append>\n              <Button\n                variant=\"outline-warning\"\n                onClick={this.saveData}\n                disabled={!active}\n              >更新\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n\n          { options ? null : <div>取得資料中...</div>}\n            \n          <HighchartsReact\n            ref=\"chartRef\"\n            highcharts={Highcharts}\n            options={options}\n            allowChartUpdate={true}\n            updateArgs={[true, true, true]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}