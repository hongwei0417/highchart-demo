{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","Highcharts","App","state","options","title","text","subtitle","xAxis","categories","series","type","colorByPoint","data","showInLegend","yAxis","exporting","buttons","contextButton","align","trans_month","i","setMonth","key","e","setState","selectMonth","setText","temp","parseFloat","target","value","setData","isNaN","newOptions","alert","this","className","InputGroup","FormControl","placeholder","onChange","Append","DropdownButton","as","variant","defalut","map","Dropdown","Item","eventKey","onSelect","Button","onClick","ref","highcharts","allowChartUpdate","updateArgs","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"wXAMAA,EAAQ,GAARA,CAAwCC,K,IAuHzBC,E,2MAnHbC,MAAQ,CACNC,QAAS,CACPC,MAAO,CACLC,KAAM,oDAGRC,SAAU,CACRD,KAAM,4EAGRE,MAAO,CACLC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC1FJ,MAAO,CACLC,KAAM,iBAIVI,OAAQ,CAAC,CACLC,KAAM,SACNC,cAAc,EACdC,KAAM,CAAC,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACzEC,cAAc,IAIlBC,MAAO,CACLV,MAAO,CACLC,KAAM,sBAIVU,UAAW,CACTC,QAAS,CACPC,cAAe,CACbC,MAAO,Y,EAOjBC,YAAc,SAACC,GAEb,OADuB,EAAKlB,MAAMC,QAAQI,MAAlCC,WACUY,I,EAGpBC,SAAW,SAACC,EAAKC,GACf,EAAKC,SAAS,CAAEC,YAAaH,K,EAG/BI,QAAU,SAACH,GACT,EAAKC,SAAS,CAAEG,KAAMC,WAAWL,EAAEM,OAAOC,U,EAG5CC,QAAU,WAAO,IAAD,EACyB,EAAK7B,MAApCyB,EADM,EACNA,KAAMF,EADA,EACAA,YAAatB,EADb,EACaA,QAC3B,IAAK6B,MAAML,IAAUF,EAAa,CAChC,IAAIQ,EAAa9B,EACjB8B,EAAWxB,OAAO,GAAGG,KAAKa,GAAeE,EACzC,EAAKH,SAAS,CAAErB,QAAS8B,SAEzBC,MAAM,8B,wEAKA,IAAD,SAC0BC,KAAKjC,MAA9BC,EADD,EACCA,QAASsB,EADV,EACUA,YACjB,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,4CACb,kBAACC,EAAA,EAAD,CAAYD,UAAU,aACpB,kBAACE,EAAA,EAAD,CACEC,YAAY,eACZC,SAAUL,KAAKT,UAEjB,kBAACW,EAAA,EAAWI,OAAZ,KACE,kBAACC,EAAA,EAAD,CACEC,GAAIN,IACJjC,MAAOqB,EAAcU,KAAKhB,YAAYM,GAAe,iCACrDmB,QAAQ,gBACRC,QAAQ,KAGN1C,EAAQI,MAAMC,WAAWsC,KAAI,SAAChB,EAAOR,GACnC,OACE,kBAACyB,EAAA,EAASC,KAAV,CACE1B,IAAKA,EACL2B,SAAU3B,EACV4B,SAAU,EAAK7B,UAEdS,QAOb,kBAACO,EAAA,EAAWI,OAAZ,KACE,kBAACU,EAAA,EAAD,CAAQP,QAAQ,kBAAkBQ,QAASjB,KAAKJ,SAAhD,kBAGJ,kBAAC,IAAD,CACEsB,IAAI,WACJC,WAAYtD,IACZG,QAASgC,KAAKjC,MAAMC,QACpBoD,kBAAkB,EAClBC,WAAY,EAAC,GAAM,GAAM,W,GA5GnBC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d1aa2776.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport { Button, InputGroup, FormControl, DropdownButton, Dropdown, ButtonGroup } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nrequire('highcharts/modules/exporting')(Highcharts)\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    options: {\r\n      title: {\r\n        text: '台中市月平均氣溫'\r\n      },\r\n\r\n      subtitle: {\r\n        text: '此資訊由交通部氣象局提供'\r\n      },\r\n\r\n      xAxis: {\r\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n        title: {\r\n          text: \"月份\"\r\n        }\r\n      },\r\n\r\n      series: [{\r\n          type: 'column',\r\n          colorByPoint: true,\r\n          data: [16.6, 17.3, 19.6, 23.1, 26.0, 27.6, 28.6, 28.3, 27.4, 25.2, 21.9, 18.1],\r\n          showInLegend: false\r\n      }],\r\n\r\n\r\n      yAxis: {\r\n        title: {\r\n          text: \"溫度°C\"\r\n        }\r\n      },\r\n\r\n      exporting: {\r\n        buttons: {\r\n          contextButton: {\r\n            align: 'left'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  trans_month = (i) => {\r\n    const { categories } = this.state.options.xAxis\r\n    return categories[i]\r\n  }\r\n\r\n  setMonth = (key, e) => {\r\n    this.setState({ selectMonth: key })\r\n  }\r\n\r\n  setText = (e) => {\r\n    this.setState({ temp: parseFloat(e.target.value) })\r\n  }\r\n\r\n  setData = () => {\r\n    const { temp, selectMonth, options } = this.state\r\n    if(!(isNaN(temp)) && selectMonth) {\r\n      let newOptions = options\r\n      newOptions.series[0].data[selectMonth] = temp\r\n      this.setState({ options: newOptions })\r\n    } else {\r\n      alert(\"輸入錯誤!\")\r\n    }\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { options, selectMonth } = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header d-flex justify-content-center\">\r\n          <InputGroup className=\"mb-3 w-50\">\r\n            <FormControl\r\n              placeholder=\"溫度\"\r\n              onChange={this.setText}\r\n            />\r\n            <InputGroup.Append>\r\n              <DropdownButton\r\n                as={InputGroup}\r\n                title={selectMonth ? this.trans_month(selectMonth) : \"請選擇月份\"}\r\n                variant=\"outline-light\"\r\n                defalut=\"1\"\r\n              >\r\n                {\r\n                  options.xAxis.categories.map((value, key) => {\r\n                    return (\r\n                      <Dropdown.Item \r\n                        key={key}\r\n                        eventKey={key}\r\n                        onSelect={this.setMonth}\r\n                      >\r\n                        {value}\r\n                      </Dropdown.Item>\r\n                    )\r\n                  })\r\n                }\r\n              </DropdownButton>\r\n            </InputGroup.Append>\r\n            <InputGroup.Append>\r\n              <Button variant=\"outline-warning\" onClick={this.setData}>修改</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n          <HighchartsReact\r\n            ref=\"chartRef\"\r\n            highcharts={Highcharts}\r\n            options={this.state.options}\r\n            allowChartUpdate={true}\r\n            updateArgs={[true, true, true]}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}