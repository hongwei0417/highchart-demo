{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","Highcharts","App","state","options","title","text","subtitle","xAxis","categories","series","type","colorByPoint","data","showInLegend","exporting","buttons","contextButton","align","setData","console","log","refs","chartRef","newOptions","setState","className","Button","onClick","this","ref","highcharts","allowChartUpdate","updateArgs","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"oUAMAA,EAAQ,GAARA,CAAwCC,K,IA6DzBC,E,2MAzDbC,MAAQ,CACNC,QAAS,CACPC,MAAO,CACLC,KAAM,gBAGRC,SAAU,CACRD,KAAM,SAGRE,MAAO,CACHC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAG9FC,OAAQ,CAAC,CACLC,KAAM,SACNC,cAAc,EACdC,KAAM,CAAC,KAAM,KAAM,MAAO,MAAO,IAAO,IAAO,MAAO,MAAO,MAAO,MAAO,KAAM,MACjFC,cAAc,IAGlBC,UAAW,CACTC,QAAS,CACPC,cAAe,CACbC,MAAO,Y,EAOjBC,QAAU,WACRC,QAAQC,IAAI,EAAKC,KAAKC,UACtB,IAAIC,EAAa,EAAKrB,MAAMC,QAC5BoB,EAAWd,OAAO,GAAGG,KAAK,GAAK,GAC/B,EAAKY,SAAS,CAACrB,QAASoB,K,wEAKxB,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAQC,QAASC,KAAKV,SAAtB,OACA,kBAAC,IAAD,CACEW,IAAI,WACJC,WAAY9B,IACZG,QAASyB,KAAK1B,MAAMC,QACpB4B,kBAAkB,EAClBC,WAAY,EAAC,GAAM,GAAM,W,GAlDnBC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9ef988c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nrequire('highcharts/modules/exporting')(Highcharts)\n\n\nclass App extends Component {\n  state = {\n    options: {\n      title: {\n        text: 'Chart.update'\n      },\n\n      subtitle: {\n        text: 'Plain'\n      },\n\n      xAxis: {\n          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n      },\n\n      series: [{\n          type: 'column',\n          colorByPoint: true,\n          data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],\n          showInLegend: false\n      }],\n\n      exporting: {\n        buttons: {\n          contextButton: {\n            align: 'left'\n          }\n        }\n      }\n    }\n  }\n\n  setData = () => {\n    console.log(this.refs.chartRef)\n    let newOptions = this.state.options\n    newOptions.series[0].data[7] = 50.0\n    this.setState({options: newOptions})\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Button onClick={this.setData}>123</Button>\n          <HighchartsReact\n            ref=\"chartRef\"\n            highcharts={Highcharts}\n            options={this.state.options}\n            allowChartUpdate={true}\n            updateArgs={[true, true, true]}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}